name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'kubernetes/deployment.yaml'  # Ignore changes to this file to prevent loops
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Unit Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test || echo "No tests found, would add tests in a real project"

  sonar:
    name: Static Code Analysis - SonarQube
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Scan for Vulnerabilities (SAST and SCA)
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, sonar]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  docker:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [build]
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      IMAGE_NAME_LOWER : ${{ github.repository}}
    outputs:
      image_tag: ${{ steps.set_output.outputs.image_tag }}
    steps:
      - name: lowercase REPO
        run: echo "IMAGE_NAME_LOWER=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}
          tags: |
            type=sha, format=long
            type=ref,event=branch
            latest
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: true
          
      - name: Debug - Show Docker Images
        run: docker images
    
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.29.0
        with:
          scan-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:sha-${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      
      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Set image tag output
        id: set_output
        run: echo "image_tag=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Run container for BurpSuite testing
        run: |
          NEW_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:sha-${{ github.sha }}

          # Configuration variables
          SSH_KEY_PATH="$HOME/.ssh/id_rsa_autossh"
          CONTAINER_NAME="autoburp"
          REMOTE_PORT=80
          LOCAL_SERVER="172.17.0.1"
          LOCAL_PORT=1010
          SSH_SERVER="serveo.net"
          OUTPUT_FILE="output.txt"

          docker run -d -p $LOCAL_PORT:$REMOTE_PORT  "$NEW_IMAGE"
          sleep 10  # Give the app time to start
          curl -v http://localhost:"$LOCAL_PORT" || exit 1

          # Clear previous output and keys
          echo "Cleaning up previous files..."
          : > output.txt
          rm -f "$SSH_KEY_PATH"*
          docker remove -f $CONTAINER_NAME

          # Generate SSH key
          echo "Generating new SSH key..."
          ssh-keygen -q -t ed25519 -a 100 -f "$SSH_KEY_PATH" -N "" -C "autossh-key"

          # Pull autossh
          echo "Pulling autossh...."
          docker pull aranajuan/autossh

          echo $SSH_KEY_PATH

          # Run the container with AutoSSH
          echo "Starting AutoSSH tunnel..."
          docker run -d -it --rm --name "$CONTAINER_NAME" \
              -v ${SSH_KEY_PATH}:${SSH_KEY_PATH} \
              aranajuan/autossh \
              autossh -M 0 -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -o "ServerAliveInterval 30" -o "ServerAliveCountMax 3" \
              -R $REMOTE_PORT:"$LOCAL_SERVER":$LOCAL_PORT "$SSH_SERVER"

          sleep 5

          #Pipeline the result of autossh to OUTPUT_FILE
          docker logs "$CONTAINER_NAME" > "$OUTPUT_FILE"

          echo "AutoSSH container is running..."

          echo "Waiting for Serveo URL..."
          timeout=60
          while ! grep -q "Forwarding HTTP traffic" "$OUTPUT_FILE" && [ $timeout -gt 0 ]; do
            sleep 1
            ((timeout--))
          done

          if [ $timeout -eq 0 ]; then
            echo "Timed out waiting for Serveo URL"
            echo "logs:" >> "$OUTPUT_FILE"
            docker logs "$CONTAINER_NAME" >> "$OUTPUT_FILE"
            exit 1
          fi

          # Extract URL from the output
          public_url=$(grep "Forwarding HTTP traffic" "$OUTPUT_FILE" | sed -n 's/.*Forwarding HTTP traffic from //p' | tr -d '\r\n')
          
          echo "Your public SonarQube URL is: $public_url"


          # Build the JSON payload with jq
          json_payload=$(jq -n --arg url "$public_url" '{
          scan_configurations: [{
            name: "Crawl strategy - fastest",
            type: "NamedConfiguration"
          }],
          urls: [$url]
          }')

          # Send the POST request and capture the Location header
          scan_id=$(curl -s -D - -o /dev/null -X POST \
            -H "Content-Type: application/json" \
            -d "$json_payload" \
            "https://934d099781768d10dd053d23316596e8.serveo.net/v0.1/scan" \
            | awk '/^location:/ { print $2 }' | tr -d '\r')

          echo "Scan ID: $scan_id"

          scan_result="https://934d099781768d10dd053d23316596e8.serveo.net/v0.1/scan/$scan_id"

          echo "Waiting for scan to complete..."
          retries=60  
          while [ $retries -gt 0 ]; do
          result=$(curl -s -X GET "$scan_result")
          progress=$(echo "$result" | jq '.scan_metrics.crawl_and_audit_progress // 0')
  
          echo "Progress: $progress%"
          if [ "$progress" -eq 100 ]; then
          echo "Scan complete."
          echo "$result"
          # Check for high severity issues
          echo "$result" | jq '
            [.issue_events[]?.issue.severity] | any(. == "medium")
          ' | grep -q true && exit 1

          exit 0
          fi

          sleep 5
          ((retries--))
          done

          echo "Timed out waiting for scan to complete."
          exit 1


  update-k8s:
    name: Update Kubernetes Deployment
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN }}
      
      - name: Setup Git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      
      - name: Update Kubernetes deployment file #a
        env:
          IMAGE_TAG: sha-${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          REGISTRY: ghcr.io
        run: |
          # Define the new image with tag
          IMAGE_NAME_LOWER=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          echo ${IMAGE_NAME_LOWER}
          NEW_IMAGE="${REGISTRY}/${IMAGE_NAME_LOWER}:${IMAGE_TAG}"
          
          # Update the deployment file directly
          sed -i "s|image: ${REGISTRY}/.*|image: ${NEW_IMAGE}|g" kubernetes/deployment.yaml
          
          # Verify the change
          echo "Updated deployment to use image: ${NEW_IMAGE}"
          grep -A 1 "image:" kubernetes/deployment.yaml
      
      - name: Commit and push changes
        run: |
          git add kubernetes/deployment.yaml
          git commit -m "Update Kubernetes deployment with new image tag: ${{ needs.docker.outputs.image_tag }} [skip ci]" || echo "No changes to commit"
          git push
